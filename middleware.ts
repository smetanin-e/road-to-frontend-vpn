import { NextRequest, NextResponse } from 'next/server';
import { UserRole } from '@prisma/client';
import { jwtVerify } from 'jose';

export async function middleware(req: NextRequest) {
  console.log('üî• Middleware is running! Pathname:', req.nextUrl.pathname);
  // –¢–µ–∫—É—â–∏–π URL
  const url = req.nextUrl.clone();
  const secret = new TextEncoder().encode(process.env.JWT_SECRET!);

  const token = req.cookies.get('access_token')?.value;

  if (!token) {
    //–Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞ - —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –ª–æ–≥–∏–Ω
    url.pathname = '/';
    return NextResponse.redirect(url);
  }

  const { payload } = await jwtVerify(token, secret);
  if (!payload.role) {
    // –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω
    console.error('JWT verify failed');
    url.pathname = '/';
    return NextResponse.redirect(url);
  }

  //–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ admin —Å—Ç—Ä–∞–Ω–∏—Ü–∞
  if (url.pathname.startsWith('/admin')) {
    if (payload.role !== UserRole.ADMIN) {
      // –ù–µ –∞–¥–º–∏–Ω ‚Äî —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞ dashboard
      url.pathname = '/dashboard';
      return NextResponse.redirect(url);
    }
    // –í—Å—ë –æ–∫ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    return NextResponse.next();
  }

  // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
  return NextResponse.next();
}

// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è middleware
export const config = {
  matcher: ['/admin/:path*'], // —Ç–æ–ª—å–∫–æ –¥–ª—è /admin
};
