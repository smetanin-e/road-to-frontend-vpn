import axios from 'axios';
import { prisma } from '../prisma-client';
import { checkPeerActivity } from '../check-peer-activity';
import { WireguardServerPeer } from '@/shared/@types/wg-rest-api';
import { OrderStatus, TransactionType } from '@prisma/client';

const WG_API_URL = process.env.WG_API_URL;
export async function dailyCharge() {
  try {
    console.log('üöÄ dailyCharge started...');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–æ–π
    const users = await prisma.user.findMany({
      where: { status: true, subscriptionId: { not: null } },
      include: {
        subscription: true,
        peers: true,
      },
    });

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∏—Ä—ã —Å WG —Å–µ—Ä–≤–µ—Ä–∞
    const wgPeers = (await axios.get(`${WG_API_URL}/api/clients`)) as WireguardServerPeer[];

    // –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞
    const now = new Date();

    for (const user of users) {
      const dailyPrice = user.subscription?.dailyPrice ?? 0;
      if ((dailyPrice as number) <= 0) continue;

      // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∏—Ä–æ–≤
      const activePeersCount = user.peers.filter((peer) =>
        checkPeerActivity(wgPeers, peer, now),
      ).length;

      if (activePeersCount === 0) continue;

      const chargeAmount = (dailyPrice as number) * activePeersCount;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
      if (user.balance < chargeAmount) {
        console.warn(
          `‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.login}: –±–∞–ª–∞–Ω—Å ${user.balance}, –Ω—É–∂–Ω–æ ${chargeAmount}`,
        );
        continue;
      }

      // –°–ø–∏—Å—ã–≤–∞–µ–º —Å –±–∞–ª–∞–Ω—Å–∞
      await prisma.user.update({
        where: { id: user.id },
        data: { balance: { decrement: chargeAmount } },
      });

      // –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤ Transaction
      await prisma.transaction.create({
        data: {
          userId: user.id,
          amount: -chargeAmount,
          type: TransactionType.CHARGE,
          status: OrderStatus.SUCCEEDED,
          description: `–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞ ${activePeersCount} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π`,
        },
      });

      console.log(`‚úÖ ${user.login}: —Å–ø–∏—Å–∞–Ω–æ ${chargeAmount} (${activePeersCount} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∏—Ä–æ–≤)`);
    }

    console.log('‚úÖ dailyCharge finished successfully');
  } catch (error) {
    console.error('‚ùå dailyCharge error:', error);
  }
}
